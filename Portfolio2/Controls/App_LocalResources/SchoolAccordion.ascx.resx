<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BaseAccordionResource.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="StarballResource.Text" xml:space="preserve">
    <value>Starball was a first year 5 month Java Project focusing on making a homemade ball physics engine.&lt;br&gt;&lt;br&gt;

This was my second computer project ever after having worked on a stock market simulation site it was also my first time working as a project lead and first ever game related project.&lt;br&gt;&lt;br&gt;

We mostly worked on 2D collisions and object management. We worked with eclipse and J2SE (mostly with Java2D).&lt;br&gt;&lt;br&gt;

Sadly a computer crash resulted in the loss of the source code, a screen saver based on the engine as well as the main demo. However this has since then taught me the importance of correctly backing sensitive information on remote machines and I have never encountered a data loss related problem. &lt;br&gt;&lt;br&gt;

I have however recovered a static demo applet as well as a different jar demo.

&lt;ul&gt;
&lt;li&gt;&lt;a href="starballApplet/starballaplet.htm" target="new"&gt;Applet demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="download/starball/demo.rar" target="new"&gt;Jar demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="download/starball/Starball v2 Motor Manual.doc"&gt;Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
  </data>
  <data name="TocResource.Text" xml:space="preserve">
    <value>TOC was my second year school project. &lt;br/&gt;&lt;br/&gt;

This joint-venture in between a group of 5 programmers from In' Tech INFO programming school and 4 graphic artists from LISAA an art school with a computer arts program was the first collaboration between these two schools. This was a pilot program that led to multiple collaborations since then to this day. This was only the second time that a 3D game project was attempted at my school and was a high risk high reward type of project. &lt;br/&gt;&lt;br/&gt;

My duties on this project were programming lead as well as person in charge of programming the engine. I was in charge of directing the work of the four other programmers for an easy integration into the engine.&lt;br/&gt;&lt;br/&gt;

Our technology choice was to use Ogre (a GNU license C++ graphics engine) and it's Newton based physics plug-in OgreNewt. Our programming tool was Visual Studio.&lt;br/&gt;&lt;br/&gt;

The graphics and the teaser videos were provided by the graphic artists from LISAA.&lt;br/&gt;&lt;br/&gt;

The game is third person 3D platform-enigma game in a Maya-like world populated by anthropomorphic lizards.&lt;br/&gt;&lt;br/&gt;

The demo of the first enigma has never been totally finished but the game is playable.&lt;br/&gt;&lt;br/&gt;

Although this school project did not reach all the ambitious goals it had set for itself, it led all the members of the team get a first hand experience in working with a large amount of people in remote locations, the importance of setting up an effective production chain for easy data integration and the effort but also the joy involved in making an ambitious video game.&lt;br/&gt;&lt;br/&gt;

To get some sort of idea, I have made available a few things related to this project :

&lt;ul&gt;
&lt;li&gt;The original &lt;a href="download/TOC/presentation.ppt"&gt; presentation documentation &lt;/a&gt; (in French) in PowerPoint format&lt;/li&gt;

&lt;li&gt;The &lt;a href="http://www.itinet.fr/wikijeu3d/index.php/Accueil"&gt;Wiki documentation&lt;/a&gt; (in french)&lt;/li&gt;
&lt;li&gt;The &lt;a href="download/TOC/source code.rar"&gt;source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href="download/TOC/toc.rar"&gt;executable code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

You can move with WASD like a classic fps, jump with the space bar and activate objects with E. This version also allows free cam debugger mode (F12). In debug mode, F3 will display object collisions and F5 will reveal sound detection spheres. &lt;br&gt;
Also note that the sounds and music are borrowed from the Half-Life Mod Natural Selection - at that time one of my favorite games - as a last minute replacement for data that hadn't been produced.</value>
  </data>
</root>