<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BarbuResource.Text" xml:space="preserve">
    <value>Barbu Dent Bleu Soccer is mostly a joke project. I worked on it for a few weekends only and never considered it as a commercial game. &lt;br&gt;&lt;br&gt;

It's an homage to one of my Co-worker's early projects: Barbu Soccer, a very fun and very simple PC soccer game. The only online reference I could find about it is here : &lt;br&gt;
&lt;a href="http://walex.cigogne.org/index.php/2005/05/06/1643-barbu-soccer"&gt;
http://walex.cigogne.org/index.php/2005/05/06/1643-barbu-soccer&lt;/a&gt;&lt;br&gt;&lt;br&gt;

I also wanted to explore MIDP 2.0 multiplayer Bluetooth capabilities and wanted to recreate the fun and crazy soccer game as a two handset game for quick and easy fun. The part of the name Dent Bleu is a literal and ridiculous translation into French of "Blue Tooth".&lt;br&gt;&lt;br&gt;

Sadly I ran into trouble testing my Bluetooth engine mostly because I only have my Sony Ericsson Z710i to test with. I might resume work on this project if I get my hands on a second device.&lt;br&gt;&lt;br&gt;

The game also features a Single Player mode, however since I really meant this game to be multiplayer I have put no effort into making a good AI, but I might consider trying to improve it at some point in time.&lt;br&gt;&lt;br&gt;

The beta of the game is available for &lt;a href="download/barbu/BarbuJAD+JAR.rar"&gt;download&lt;/a&gt;, as well as the &lt;a href="download/barbu/Barbu-NetBeansProject.rar"&gt;source&lt;/a&gt;(NetBeans Project). Be warned, the multiplayer mode is not working yet! Have fun anyway :D!&lt;br&gt;&lt;br&gt;

And finally, this game only weighs 64k!</value>
  </data>
  <data name="TorqueResource.Text" xml:space="preserve">
    <value>I have just purchased the Torque Game engine Licence and am starting to go through some tutorials.&lt;br&gt;&lt;br&gt;</value>
  </data>
  <data name="XNAResource.Text" xml:space="preserve">
    <value>I have been checking out XNA since its public release. I read two books on XNA Programming and gone through many tutorials and video tutorials. I have started building a custom game engine but I am still waiting to see if there will be a good 3D physics engine that can be integrated in an XNA project.&lt;br&gt;&lt;br&gt;

I have also ported my &lt;a href="http://code.google.com/p/androidtetris/"&gt;Android Tetris&lt;/a&gt;  to &lt;a href="http://code.google.com/p/xnatetris/"&gt;XNA Tetris&lt;/a&gt;.&lt;br&gt;&lt;br&gt;

</value>
  </data>
  <data name="AndroidResource.Text" xml:space="preserve">
    <value>I have programmed a fully functional Tetris clone for Android. It is available as an open source project on Google code &lt;a href="http://code.google.com/p/androidtetris/"&gt;http://code.google.com/p/androidtetris/&lt;/a&gt; .&lt;br&gt;&lt;br&gt;</value>
  </data>
  <data name="DSResource.Text" xml:space="preserve">
    <value>Third and probably last of my Tetris games, I have ported the Android (Java) version of the game to C using common Homebrew library 'libdns'. This allowed me to get familiar with the DS hardware and create a functionning game in under two weeks of casual home programming.&lt;br&gt;&lt;br&gt;

Link to project on google code : &lt;a href="http://code.google.com/p/dstetris/"&gt;http://code.google.com/p/dstetris/&lt;/a&gt;</value>
  </data>
  <data name="F3Resource.Text" xml:space="preserve">
    <value>I have have enjoyed this game so much lately that I have decided to check out Bethesda's G.E.C.K. creation tools and play around with them.</value>
  </data>
</root>